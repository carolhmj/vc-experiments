{"version":3,"file":"js/574.babylonBundle.js","mappings":"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","sources":["webpack://vc-experiments/./assets/grass.jpg","webpack://vc-experiments/./src/commandController/arcRotateCameraCommandProcessor.ts","webpack://vc-experiments/./src/commandController/commandProducer.ts","webpack://vc-experiments/./src/commandController/HeadPoseCommandProducer.ts","webpack://vc-experiments/./assets/environment/forest.env","webpack://vc-experiments/./assets/glb/BoomBox.glb","webpack://vc-experiments/./src/scenes/defaultWithTexture.ts"],"sourcesContent":["export default __webpack_public_path__ + \"9b31293ea96c8dfa518b45622da82a13.jpg\";","import { ArcRotateCamera } from \"@babylonjs/core\";\r\nimport { Tools } from \"@babylonjs/core/Misc\"\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { CommandProcessor, Command } from \"./commandProcessor\";\r\n\r\n/**\r\n * This class receives commands to control arcrotatecamera\r\n */\r\nexport class ArcRotateCameraCommandProcessor implements CommandProcessor {\r\n    private _camera: ArcRotateCamera;\r\n    \r\n    private _zoomStep = 1; \r\n    private _rotateStep = Tools.ToRadians(45);\r\n    private _panStep = 0.5;\r\n    \r\n    constructor(camera: ArcRotateCamera) {\r\n        this._camera = camera;\r\n        this._camera.storeState();\r\n    }\r\n\r\n    processCommand(command: Command) {\r\n        console.log('parse commands on text', command);\r\n        // Frequency case\r\n        const times = 1;\r\n        console.log('times repeat', times);\r\n        // Zoom case\r\n        if (command.action === \"zoom\") {\r\n            const zoomAmt = this._zoomStep * times;\r\n            if (command.modifier === \"out\") {\r\n                console.log('zoom out');\r\n                this._camera.radius += zoomAmt;\r\n            } else {\r\n                console.log('zoom in');\r\n                this._camera.radius -= zoomAmt;\r\n            }\r\n        }\r\n        if (command.action === (\"rotate\") || command.action === (\"spin\") || command.action === (\"look\")) {\r\n            let rotateAmount = this._rotateStep;\r\n            if (command.value) {\r\n                rotateAmount = command.value;\r\n            }\r\n            const finalRot = rotateAmount * times;\r\n            console.log(finalRot);\r\n            if (command.modifier === (\"left\")) {\r\n                this._camera.alpha -= finalRot;\r\n            } else if (command.modifier === (\"right\")) {\r\n                this._camera.alpha += finalRot;\r\n            } else if (command.modifier === (\"up\")) {\r\n                this._camera.beta -= finalRot;\r\n            } else {\r\n                this._camera.beta += finalRot;\r\n            }\r\n        }\r\n        if (command.action === (\"pan\") || command.action === (\"move\")) {\r\n            let panAmount = this._panStep;\r\n            if (command.value) {\r\n                panAmount = command.value;\r\n            }\r\n            console.log('pan amt', panAmount);\r\n            const finalPan = panAmount * times;\r\n            if (command.modifier === (\"left\")) {\r\n                this._camera.target.addInPlace(this._camera.getDirection(Vector3.Left()).scale(finalPan));\r\n            } else if (command.modifier === (\"right\")) {\r\n                this._camera.target.addInPlace(this._camera.getDirection(Vector3.Right()).scale(finalPan));\r\n            } else if (command.modifier === (\"up\")) {\r\n                this._camera.target.addInPlace(this._camera.getDirection(Vector3.Up()).scale(finalPan));\r\n            } else if (command.modifier === (\"down\")) {\r\n                this._camera.target.addInPlace(this._camera.getDirection(Vector3.Down()).scale(finalPan));\r\n            }\r\n        }\r\n        if (command.action === \"reset\") {\r\n            this._camera.restoreState();\r\n        }\r\n    }\r\n}","/**\r\n * A command is something used to give instructions to be executed\r\n */\r\n\r\nimport { CommandProcessor, Command } from \"./commandProcessor\";\r\n\r\n\r\n/**\r\n * A CommandProducer is a class that issues commands used to control an object through the CommandController.\r\n * These commands can be issued through speech, gesture recognition, etc...\r\n */\r\nexport class CommandProducer {\r\n    protected _processors: CommandProcessor[] = [];\r\n\r\n    addProcessor(processor: CommandProcessor) {\r\n        if (this._processors.indexOf(processor) < 0) {\r\n            this._processors.push(processor);\r\n        } \r\n    }\r\n\r\n    removeProcessor(processor: CommandProcessor) {\r\n        const idx = this._processors.indexOf(processor);\r\n        if (idx >= 0) {\r\n            this._processors.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    protected _produceCommand(command: Command) {\r\n        for (const processor of this._processors) {\r\n            processor.processCommand(command);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The start function will start generating the commands\r\n     * and passing them to the processors\r\n     * Each derived class will implement its own way of issuing commands\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public start() {\r\n\r\n    }\r\n\r\n    /**\r\n     * The stop function will stop issuing commands and call stopCallback once this is done\r\n     * @param stopCallback \r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    public stop(stopCallback?: () => void) {\r\n        \r\n        if (stopCallback) {\r\n            stopCallback();\r\n        }\r\n    }\r\n}","import { CommandProducer } from \"./commandProducer\";\r\nimport { Human } from \"@vladmandic/human\";\r\nimport { Tools } from \"@babylonjs/core\";\r\n/**\r\n * This class produces commands based on headpose by using human.js\r\n */\r\nexport class HeadPoseCommandProducer extends CommandProducer {\r\n    private _video: HTMLVideoElement;\r\n    private _stream?: MediaStreamTrack;\r\n    private _human: Human;\r\n    private _runningId?: number;\r\n    private _restingPosition: {\r\n        pitch: number;\r\n        yaw: number;\r\n        numSamples: number;\r\n        calculated: boolean;\r\n    };\r\n    private _numRestingSamples = 3; //minimum samples needed to get the average\r\n    private _timingIntervals = 700; // Interval in ms between sending two batches of transformation\r\n    private _verticalAngleDiff = Tools.ToRadians(20);\r\n    private _horizontalAngleDiff = Tools.ToRadians(20);\r\n    private _verticalAngleChange = Tools.ToRadians(1);\r\n    private _horizontalAngleChange = Tools.ToRadians(1);\r\n    private _videoContainer: HTMLDivElement;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._restingPosition = {\r\n            pitch: 0,\r\n            yaw: 0,\r\n            numSamples: 0,\r\n            calculated: false,\r\n        };\r\n\r\n        const existingVideoContainer = document.getElementById(\"videoContainer\");\r\n        if (existingVideoContainer) {\r\n            this._videoContainer = existingVideoContainer as HTMLDivElement;\r\n        } else {\r\n            this._videoContainer = document.createElement(\"div\");\r\n            this._videoContainer.id = \"videoContainer\";\r\n            document.body.appendChild(this._videoContainer);\r\n            this._videoContainer.style.position = \"absolute\";\r\n            this._videoContainer.style.top = \"10px\";\r\n            this._videoContainer.style.right = \"10px\";\r\n            this._videoContainer.style.width = \"350px\";\r\n            this._videoContainer.style.height = \"350px\";\r\n            this._videoContainer.style.background = \"black\";\r\n            this._videoContainer.style.display = \"flex\";\r\n            this._videoContainer.style.alignItems = \"center\";\r\n            this._videoContainer.style.justifyContent = \"center\";\r\n\r\n            const innerDiv = document.createElement(\"div\");\r\n            innerDiv.id = \"innerDiv\";\r\n            innerDiv.style.position = \"absolute\";\r\n            innerDiv.style.width = \"100%\";\r\n            innerDiv.style.height = \"100%\";\r\n            innerDiv.style.background = \"rgba(111, 111, 111, 0.5)\";\r\n            innerDiv.style.zIndex = \"100\";\r\n            innerDiv.style.display = \"flex\";\r\n            innerDiv.style.justifyContent = \"center\";\r\n            innerDiv.style.alignItems = \"center\";\r\n            this._videoContainer.appendChild(innerDiv);\r\n\r\n            const innerDivText = document.createElement(\"div\");\r\n            innerDivText.id =  \"innerDivText\";\r\n            innerDivText.style.color = \"white\";\r\n            innerDivText.innerHTML = \"WAITING FOR VIDEO\";\r\n            innerDiv.appendChild(innerDivText);\r\n        }\r\n\r\n        const existingVideo = document.getElementById(\"headPoseVideo\");\r\n        if (existingVideo) {\r\n            this._video = existingVideo as HTMLVideoElement;\r\n        } else {\r\n            this._video = document.createElement(\"video\");\r\n            // document.body.appendChild(this._video);\r\n            this._video.id = \"headPoseVideo\";\r\n            this._videoContainer.appendChild(this._video);\r\n            this._video.style.width = \"100%\";\r\n        }\r\n\r\n        this._human = new Human({});\r\n    }\r\n\r\n    private _accumulateInitialSamples(pitch: number, yaw: number) {\r\n        if (\r\n            this._restingPosition.numSamples < this._numRestingSamples &&\r\n            !this._restingPosition.calculated\r\n        ) {\r\n            this._restingPosition.pitch += pitch;\r\n            this._restingPosition.yaw += yaw;\r\n            this._restingPosition.numSamples += 1;\r\n        } else if (\r\n            this._restingPosition.numSamples >= this._numRestingSamples &&\r\n            !this._restingPosition.calculated\r\n        ) {\r\n            // console.log(\"more than numsamples\");\r\n            this._restingPosition.pitch /= this._restingPosition.numSamples;\r\n            this._restingPosition.yaw /= this._restingPosition.numSamples;\r\n            this._restingPosition.calculated = true;\r\n            console.log(\r\n                \"average head position pitch and yaw in degrees\",\r\n                Tools.ToDegrees(this._restingPosition.pitch),\r\n                Tools.ToDegrees(this._restingPosition.yaw)\r\n            );\r\n            const overlay = this._videoContainer.children[0] as HTMLElement;\r\n            console.log('overlay', overlay);\r\n            overlay.style.visibility = \"hidden\";\r\n        }\r\n        return this._restingPosition.calculated;\r\n    }\r\n\r\n    private _calculateCommand(pitch: number, yaw: number) {\r\n        const diffPitch = pitch - this._restingPosition.pitch;\r\n        // console.log(\"diffpitch in degrees\", Tools.ToDegrees(diffPitch));\r\n        if (Math.abs(diffPitch) > this._verticalAngleDiff) {\r\n            this._produceCommand({\r\n                action: \"rotate\",\r\n                modifier: diffPitch < 0 ? \"up\" : \"down\",\r\n                value: this._verticalAngleChange\r\n            });\r\n        }\r\n        const diffYaw = yaw - this._restingPosition.yaw;\r\n        // console.log(\"diffyaw in degrees\", Tools.ToDegrees(diffPitch));\r\n        if (Math.abs(diffYaw) > this._horizontalAngleDiff) {\r\n            this._produceCommand({\r\n                action: \"rotate\",\r\n                modifier: diffYaw > 0 ? \"right\" : \"left\",\r\n                value: this._horizontalAngleChange\r\n            });\r\n        }\r\n    }\r\n\r\n    _runDetection = () => {\r\n        console.log(\"start detect\");\r\n        // Resting position hasn't been calculated, calculate it with a shorter interval\r\n        if (this._restingPosition.calculated) {\r\n            this._runningId = window.setTimeout(this._runDetection, 100);\r\n        } else {\r\n            this._runningId = window.setTimeout(\r\n                this._runDetection,\r\n                this._timingIntervals\r\n            );\r\n        }\r\n        this._human\r\n            .detect(this._video, {\r\n                face: {\r\n                    enabled: true,\r\n                    detector: { rotation: true },\r\n                    mesh: { enabled: true },\r\n                },\r\n                gesture: {\r\n                    enabled: false,\r\n                },\r\n            })\r\n            .then((result) => {\r\n                if (\r\n                    result.face &&\r\n                    result.face.length > 0 &&\r\n                    result.face[0].rotation?.angle\r\n                ) {\r\n                    const { pitch, yaw } = result.face[0].rotation.angle;\r\n                    const canCalulate = this._accumulateInitialSamples(\r\n                        pitch,\r\n                        yaw\r\n                    );\r\n                    if (canCalulate) {\r\n                        this._calculateCommand(pitch, yaw);\r\n                    }\r\n                }\r\n            });\r\n    };\r\n\r\n    public start(): void {\r\n        console.log(\"start\");\r\n        navigator.mediaDevices\r\n            .getUserMedia({ video: true, audio: false })\r\n            .then((stream) => {\r\n                const text = this._videoContainer.children[0].children[0];\r\n                text.innerHTML = \"INITIALIZING DETECTION\";\r\n                this._video.srcObject = stream;\r\n                this._stream = stream.getVideoTracks()[0];\r\n                this._video.play();\r\n                this._runDetection();\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error:\", error);\r\n            });\r\n    }\r\n\r\n    public stop(stopCallback?: (() => void) | undefined): void {\r\n        console.log(\"call stop\");\r\n        this._stream?.stop();\r\n        if (this._runningId) {\r\n            console.log(\"stop detection\");\r\n            const overlay = this._videoContainer.children[0] as HTMLElement;\r\n            console.log('overlay', overlay);\r\n            overlay.style.visibility = \"visible\";\r\n            // cancelAnimationFrame(this._runningId);\r\n            clearTimeout(this._runningId);\r\n        }\r\n        if (stopCallback) {\r\n            stopCallback();\r\n        }\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"22bbfea34feab50837a25e487165bba2.env\";","export default __webpack_public_path__ + \"10afca2f499c0a79b96145553ece366e.glb\";","import { Engine } from \"@babylonjs/core/Engines/engine\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { ArcRotateCamera } from \"@babylonjs/core/Cameras/arcRotateCamera\";\r\nimport {UniversalCamera} from \"@babylonjs/core/Cameras/universalCamera\";\r\nimport { Vector3 } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { CreateGround } from \"@babylonjs/core/Meshes/Builders/groundBuilder\";\r\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { CreateSceneClass } from \"../createScene\";\r\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\r\nimport {HemisphericLight} from \"@babylonjs/core\";\r\nimport { CubeTexture } from \"@babylonjs/core/Materials/Textures/cubeTexture\";\r\nimport {PBRMaterial} from \"@babylonjs/core\";\r\n\r\n// If you don't need the standard material you will still need to import it since the scene requires it.\r\n// import \"@babylonjs/core/Materials/standardMaterial\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\n\r\nimport grassTextureUrl from \"../../assets/grass.jpg\";\r\nimport { DirectionalLight } from \"@babylonjs/core/Lights/directionalLight\";\r\n\r\nimport \"@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent\";\r\n\r\nimport { KeyboardInfo } from \"@babylonjs/core\";\r\nimport { OnlineVoiceControlCommandProducer } from \"../commandController/OnlineVoiceControlCommandProducer\";\r\nimport { ArcRotateCameraCommandProcessor } from \"../commandController/arcRotateCameraCommandProcessor\";\r\nimport { UniversalCameraCommandProcessor } from \"../commandController/universalCameraCommandProcessor\";\r\nimport { HeadPoseCommandProducer } from \"../commandController/HeadPoseCommandProducer\";\r\nimport {MeshBuilder} from \"@babylonjs/core\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport {DefaultRenderingPipeline} from \"@babylonjs/core\";\r\n\r\nimport skyboxTex from \"../../assets/environment/forest.env\";\r\nimport boxUrl from \"../../assets/glb/BoomBox.glb\";\r\n\r\nimport \"@babylonjs/loaders/glTF\";\r\n\r\nexport class DefaultSceneWithTexture implements CreateSceneClass {\r\n    createScene = async (\r\n        engine: Engine,\r\n        canvas: HTMLCanvasElement\r\n    ): Promise<Scene> => {\r\n        // This creates a basic Babylon Scene object (non-mesh)\r\n        const scene = new Scene(engine);\r\n\r\n        void Promise.all([\r\n            import(\"@babylonjs/core/Debug/debugLayer\"),\r\n            import(\"@babylonjs/inspector\"),\r\n        ]).then((_values) => {\r\n            console.log(_values);\r\n            // scene.debugLayer.show({\r\n            //     handleResize: true,\r\n            //     overlay: true,\r\n            //     globalRoot: document.getElementById(\"#root\") || undefined,\r\n            // });\r\n        });\r\n\r\n        // This creates and positions a free camera (non-mesh)\r\n        // const camera = new UniversalCamera(\"camera\", new Vector3(0, 1.5, 0));\r\n        const camera = new ArcRotateCamera(\r\n            \"c\",\r\n            2.2,\r\n            1.0,\r\n            5,\r\n            new Vector3(0, 0, 0),\r\n            scene\r\n        );\r\n        camera.upperBetaLimit = 1.5;\r\n        camera.upperRadiusLimit = 8;\r\n        camera.lowerRadiusLimit = 3;\r\n        camera.wheelDeltaPercentage = 10;\r\n\r\n        // This targets the camera to scene origin\r\n        camera.setTarget(new Vector3(0, 0, 0));\r\n\r\n        // This attaches the camera to the canvas\r\n        camera.attachControl(canvas, true);\r\n\r\n        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n        const hemisphericLight = new HemisphericLight(\r\n            \"light\",\r\n            new Vector3(0, 1, 0),\r\n            scene\r\n        );\r\n\r\n        // Default intensity is 1. Let's dim the light a small amount\r\n        hemisphericLight.intensity = 0.7;\r\n\r\n        const light = new DirectionalLight(\r\n            \"light-dir\",\r\n            new Vector3(-1, -1, 5),\r\n            scene\r\n        );\r\n        light.intensity = 0.5;\r\n        light.position.y = 10;\r\n\r\n        const ground = MeshBuilder.CreateGround(\"ground\", {width:10,height:10});\r\n        const groundMaterial = new PBRMaterial(\"ground material\", scene);\r\n        groundMaterial.metallic = 0.0;\r\n        groundMaterial.roughness = 1.0;\r\n        groundMaterial.albedoTexture = new Texture(grassTextureUrl, scene);\r\n        (groundMaterial.albedoTexture as Texture).uScale = 5;\r\n        (groundMaterial.albedoTexture as Texture).vScale = 5;\r\n        ground.material = groundMaterial;\r\n\r\n        const skyBoxTexture = CubeTexture.CreateFromPrefilteredData(skyboxTex, scene);\r\n\r\n        const rp = new DefaultRenderingPipeline();\r\n        rp.samples = 4;\r\n        rp.bloomEnabled = true;\r\n\r\n        const bb = await SceneLoader.ImportMeshAsync(\"\", \"\", boxUrl);\r\n        bb.meshes[0].normalizeToUnitCube();\r\n        bb.meshes[0].position.y = 0.5;\r\n\r\n        const envHelper = scene.createDefaultEnvironment({\r\n            skyboxTexture: skyBoxTexture,\r\n            environmentTexture: skyBoxTexture,\r\n            createGround: false,\r\n            skyboxSize: 10,\r\n        });\r\n        envHelper!.skyboxMaterial!.primaryColor = new Color3(1,1,1);\r\n       \r\n        // const vc = new OnlineVoiceControlCommandProducer();\r\n        const vc = new HeadPoseCommandProducer();\r\n        \r\n        // const cameraProcessor = new UniversalCameraCommandProcessor(camera);\r\n        const cameraProcessor = new ArcRotateCameraCommandProcessor(camera);\r\n\r\n        vc.addProcessor(cameraProcessor);\r\n        \r\n        let listening = false;\r\n        let lastStateToggle = Date.now();\r\n\r\n        const keyListen = (keyInfo: KeyboardInfo) => {\r\n            const canChangeState = Date.now() - lastStateToggle > 1000;\r\n            if (keyInfo.event.key === \"Enter\" && canChangeState && !listening) {\r\n                listening = true;\r\n                console.log('start listening');\r\n                vc.start();\r\n                lastStateToggle = Date.now();\r\n            } else if (keyInfo.event.key === \"Enter\" && canChangeState && listening) {\r\n                vc.stop(() => {\r\n                    listening = false;\r\n                    console.log('stop listening');\r\n                    lastStateToggle = Date.now();\r\n                });\r\n            }\r\n        }\r\n        const keyListenObserver = scene.onKeyboardObservable.add(keyListen);\r\n\r\n        return scene;\r\n    };\r\n}\r\n\r\nexport default new DefaultSceneWithTexture();\r\n"],"names":["camera","_zoomStep","_rotateStep","_panStep","this","_camera","storeState","processCommand","command","console","log","action","zoomAmt","modifier","radius","rotateAmount","value","finalRot","alpha","beta","panAmount","finalPan","target","addInPlace","getDirection","scale","restoreState","_processors","addProcessor","processor","indexOf","push","removeProcessor","idx","splice","_produceCommand","start","stop","stopCallback","_numRestingSamples","_timingIntervals","_verticalAngleDiff","Tools","_horizontalAngleDiff","_verticalAngleChange","_horizontalAngleChange","_runDetection","_restingPosition","calculated","_runningId","window","setTimeout","_human","detect","_video","face","enabled","detector","rotation","mesh","gesture","then","result","length","angle","pitch","yaw","_accumulateInitialSamples","_calculateCommand","numSamples","existingVideoContainer","document","getElementById","_videoContainer","createElement","id","body","appendChild","style","position","top","right","width","height","background","display","alignItems","justifyContent","innerDiv","zIndex","innerDivText","color","innerHTML","existingVideo","overlay","children","visibility","diffPitch","Math","abs","diffYaw","navigator","mediaDevices","getUserMedia","video","audio","stream","srcObject","_stream","getVideoTracks","play","catch","error","clearTimeout","CommandProducer","createScene","engine","canvas","scene","Promise","all","_values","upperBetaLimit","upperRadiusLimit","lowerRadiusLimit","wheelDeltaPercentage","setTarget","attachControl","HemisphericLight","intensity","light","y","ground","MeshBuilder","groundMaterial","PBRMaterial","metallic","roughness","albedoTexture","grass","uScale","vScale","material","skyBoxTexture","rp","DefaultRenderingPipeline","samples","bloomEnabled","bb","meshes","normalizeToUnitCube","createDefaultEnvironment","skyboxTexture","environmentTexture","createGround","skyboxSize","skyboxMaterial","primaryColor","vc","HeadPoseCommandProducer","cameraProcessor","ArcRotateCameraCommandProcessor","listening","lastStateToggle","Date","now","keyListen","keyInfo","canChangeState","event","key","onKeyboardObservable","add","DefaultSceneWithTexture"],"sourceRoot":""}